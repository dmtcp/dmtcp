This is intended as one of a series of informal documents to describe
and partially document some of the more subtle DMTCP data structures
and algorithms.  These documents are snapshots in time, and they
may become somewhat out-of-date over time (and hopefully also refreshed
to re-sync them with the code again).  (Updated May, 2015)

The topics on debugging include:
A. PRINT DEBUGGING
B. STOPPING GDB BEFORE JASSERT CAUSES PROCESS EXIT
C. LAUNCHING A PROCESS UNDER DMTCP CONTROL USING GDB
D. DEBUGGING ON RESTART USING GDB ATTACH
E. TRICKS FOR DEBUGGING WHILE INSIDE GDB

===
A. PRINT DEBUGGING

There are several ways to debug.  If you want "print debugging", with
a trace of the major operations, do:
  ./configure --enable-logging
  make -j clean
  make -j check-dmtcp1
and look in /tmp/dmtcp-USER@HOST for files of the form jassertlog.*,
which contain copies of calls to JTRACE/JWARN/JNOTE inside DMTCP,
with one file per process, and per exec into a new program.

If there are multiple processes, then a log from each process will
be in its own file in /tmp/dmtcp-USER@HOST/jassertlog*

===
B. STOPPING GDB BEFORE JASSERT CAUSES PROCESS EXIT

If debugging under GDB, and the process exits before you can examine
the cause, try:
 (gdb) break _exit
   [ The function _exit is used when JASSERT() exits. ]

Note that a DMTCP application returns 'return code' 99 or else
'getenv("DMTCP_FAIL_RC")' when DMTCP fails an assertion.
If the 'DMTCP_ABORT_ON_FAILURE' environment variable is set, DMTCP attempts
to create a core dump on a JASSERT failure.
If the 'DMTCP_SLEEP_ON_FAILURE' environment variable is set, DMTCP goes into
an infinite loop, and a user can attach to a live process with GDB.

===
C. LAUNCHING A PROCESS UNDER DMTCP CONTROL USING GDB

JASSERT doesn't generate a core dump by default (because it calls _exit()).
Exporting the environment variable DMTCP_ABORT_ON_FAILURE will cause
it to call abort(). This can be useful when debugging distributed processes.
Example:
  DMTCP_ABORT_ON_FAILURE=1 bin/dmtcp_launch a.out
  gdb a.out core

When used with dmtcp_restart, it is important to embed
DMTCP_ABORT_ON_FAILURE in the checkpoint image by first using it with
dmtcp_launch, as above. After that, a restarted process will also generate
a core dump.

===

If the bug occurs during launch or possibly in checkpoint-resume, try:
  gdb --args dmtcp_launch -i5 test/dmtcp1

Note that GDB will first give you control under 'dmtcp_launch'.
(1) If you want to stop GDB when dmtcp1 enters its main() routine:
  (gdb) break execvp
  (gdb) run
  (gdb) break main
  (gdb) continue
(2) If you want to stop GDB when the DMTCP constructor takes control
      in dmtcp1 (even before entering the main() routine of dmtcp1), do:
  (gdb) break 'dmtcp::DmtcpWorker::DmtcpWorker()'
    [ and say yes to:  "breakpoint pending on future shared library load" ]
  (gdb) run

===
D. DEBUGGING ON RESTART USING GDB ATTACH

Ideally, we would like to just use:  gdb --args dmtcp_restart ckpt_*.dmtcp
This does not work (unless you just want to debug the command dmtcp_restart
itself).  But the command dmtcp_restart overlays the old memory from
ckpt_*.dmtcp into the current running 'dmtcp_restart' process.  As you would
expect, GDB has difficulty following this memory overlay.  Therefore,
the best way to debug a restarted process is to use the 'attach' feature
of GDB.

If you want to debug DMTCP functions also, be sure to compile DMTCP with
debugging support.  A convenient recipe from the root directory of DMTCP is:
  ./configure CXXFLAGS="-g3 -O0" CFLAGS="-g3 -O0"
  make -j clean
  make -j

In the past, using 'gdb attach' was as easy as:
       dmtcp_restart ckpt_a.out_*.dmtcp &
       gdb a.out `pgrep -n a.out`

DMTCP ATTACH RESTART:
Unfortunately, recent Linux distros have forbidden this type of
'gdb attach' because it can expose security holes.  To get around
this on a per-process basis, DMTCP provides the special
environment variable DMTCP_RESTART_PAUSE:
       DMTCP_RESTART_PAUSE=<NUM> dmtcp_restart ckpt_a.out_*.dmtcp &
       ps uxw  # To find pid of target.
       gdb -p <PID>
       (gdb) source gdb-dmtcp-utils
       (gdb) frame 0
       (gdb) load-symbols-library <ADDRESS>
An alternative invocation is:
       dmtcp_restart --debug-restart-pause ckpt_a.out_*.dmtcp &

You can set <NUM> from 1 through 7, to stop early or late.
In GDB, change the restartPauseLevel variable to a later value to continue.

===
E. TRICKS FOR DEBUGGING WHILE INSIDE GDB

    Sometimes, you will want GDB to stop exactly at a certain line of code.
If that line occurs early, execution may have already passed that line
before you can attach.  One trick to stop GDB there is to add a line of code
(even into DMTCP itself):
  { int x = 1; while (x) {}; }
After that, use one of the above techniques for attaching with GDB, and:
  (gdb) where
  (gdb) print x = 0 # or: (gdb) set x=0
  (gdb) next

    Most of DMTCP is written in C++.  If you want to list or set a breakpoint
in a DMTCP function, it helps to search for full function signatures of
non-static functions by giving a substring:
  (gdb) info functions initialize
  (gdb) break 'dmtcp::Util::initializ<TAB>

    Note that during dmtcp_launch, the first thread will be the
primary thread (the thread that executes the user's function main()).
The second thread created is the checkpoint thread.  You'll recognize the
difference because the user's primary thread will have main() on the stack;
and the checkpoint thread will have the function checkpointhread() on the stack.
    After dmtcp_restart, the primary thread will not necessarily
be the first of the threads displayed by GDB's 'info threads' command.
However, the threads can still be distinguished by examining the stack
for each thread:
  primary thread: main()
  checkpoint thread:  checkpointhread()
  other user thread:  anything
