Description: Allow linker option -Bsymbolic-functions.
 The -Bsymbolic-functions is used by some Ubuntu distros. To support this
 option, dmtcp_event_hook is made a _weak_ symbol.

--- dmtcp-2.0.orig/dmtcp/include/dmtcpplugin.h
+++ dmtcp-2.0/dmtcp/include/dmtcpplugin.h
@@ -106,7 +106,8 @@ EXTERNC int dmtcp_unique_pids_equal(Dmtc
                                     DmtcpUniqueProcessId b);
 EXTERNC int dmtcp_plugin_disable_ckpt(void);
 EXTERNC void dmtcp_plugin_enable_ckpt(void);
-EXTERNC void dmtcp_event_hook(DmtcpEvent_t event, DmtcpEventData_t *data);
+EXTERNC void dmtcp_event_hook(DmtcpEvent_t event, DmtcpEventData_t *data)
+  __attribute((weak));
 EXTERNC int dmtcp_send_key_val_pair_to_coordinator(const void *key,
                                                    size_t key_len,
                                                    const void *val,
--- dmtcp-2.0.orig/dmtcp/src/dmtcpnohijackstubs.cpp
+++ dmtcp-2.0/dmtcp/src/dmtcpnohijackstubs.cpp
@@ -14,11 +14,6 @@
 // libdmtcp.so defines this differently
 void _dmtcp_setup_trampolines() {}
 
-void dmtcp_event_hook(DmtcpEvent_t id, void* data)
-{
-  return;
-}
-
 int  dmtcp_get_ckpt_signal()
 {
   JASSERT(false) .Text ("NOT REACHED");
--- dmtcp-2.0.orig/dmtcp/src/dmtcpplugin.cpp
+++ dmtcp-2.0/dmtcp/src/dmtcpplugin.cpp
@@ -28,11 +28,6 @@
 
 using namespace dmtcp;
 
-EXTERNC void dmtcp_event_hook(DmtcpEvent_t id, DmtcpEventData_t *data)
-{
-  DMTCP_NEXT_EVENT_HOOK(id, data);
-}
-
 EXTERNC int  dmtcp_get_ckpt_signal()
 {
   const int ckpt_signal = dmtcp::DmtcpWorker::determineMtcpSignal();
--- dmtcp-2.0.orig/dmtcp/src/dmtcpworker.cpp
+++ dmtcp-2.0/dmtcp/src/dmtcpworker.cpp
@@ -573,5 +573,7 @@ void dmtcp::DmtcpWorker::processEvent(Dm
 {
   static jalib::JBuffer buf(0); // To force linkage of jbuffer.cpp
   dmtcp_ProcessInfo_ProcessEvent(event, data);
-  dmtcp_event_hook(event, data);
+  if (dmtcp_event_hook != NULL) {
+    dmtcp_event_hook(event, data);
+  }
 }
--- dmtcp-2.0.orig/dmtcp/src/threadwrappers.cpp
+++ dmtcp-2.0/dmtcp/src/threadwrappers.cpp
@@ -59,7 +59,7 @@ int clone_start(void *arg)
   // Free memory previously allocated through JALLOC_HELPER_MALLOC in __clone
   JALLOC_HELPER_FREE(threadArg);
 
-  dmtcp_event_hook(DMTCP_EVENT_THREAD_START, NULL);
+  dmtcp::DmtcpWorker::processEvent(DMTCP_EVENT_THREAD_START, NULL);
 
   /* Thread finished initialization.  It's now safe for this thread to
    * participate in checkpoint.  Decrement the uninitializedThreadCount in
@@ -99,7 +99,7 @@ extern "C" int __clone(int (*fn) (void *
     JTRACE("Clone call failed")(JASSERT_ERRNO);
     dmtcp::ThreadSync::decrementUninitializedThreadCount();
   } else {
-    dmtcp_event_hook(DMTCP_EVENT_THREAD_CREATED, NULL);
+    dmtcp::DmtcpWorker::processEvent(DMTCP_EVENT_THREAD_CREATED, NULL);
   }
 
   WRAPPER_EXECUTION_ENABLE_CKPT();
@@ -129,7 +129,7 @@ static void *pthread_start(void *arg)
    *  thread actually exits?
    */
   dmtcp::ProcessInfo::instance().eraseTid(virtualTid);
-  dmtcp_event_hook(DMTCP_EVENT_PTHREAD_RETURN, NULL);
+  dmtcp::DmtcpWorker::processEvent(DMTCP_EVENT_PTHREAD_RETURN, NULL);
   WRAPPER_EXECUTION_ENABLE_CKPT();
   dmtcp::ThreadSync::unsetOkToGrabLock();
   return result;
@@ -193,7 +193,7 @@ extern "C" void pthread_exit(void * retv
   WRAPPER_EXECUTION_DISABLE_CKPT();
   mtcp_threadiszombie();
   dmtcp::ProcessInfo::instance().eraseTid(gettid());
-  dmtcp_event_hook(DMTCP_EVENT_PTHREAD_EXIT, NULL);
+  dmtcp::DmtcpWorker::processEvent(DMTCP_EVENT_PTHREAD_EXIT, NULL);
   WRAPPER_EXECUTION_ENABLE_CKPT();
   dmtcp::ThreadSync::unsetOkToGrabLock();
   _real_pthread_exit(retval);
--- dmtcp-2.0.orig/dmtcp/src/workerhijack.cpp
+++ dmtcp-2.0/dmtcp/src/workerhijack.cpp
@@ -31,7 +31,7 @@ dmtcp::DmtcpWorker dmtcp::DmtcpWorker::t
 
 void dmtcp::DmtcpWorker::resetOnFork()
 {
-  dmtcp_event_hook(DMTCP_EVENT_ATFORK_CHILD, NULL);
+  processEvent(DMTCP_EVENT_ATFORK_CHILD, NULL);
 
   theInstance.cleanupWorker();
   shutdownMtcpEngineOnFork();
