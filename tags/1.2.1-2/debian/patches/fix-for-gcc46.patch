Description: Fix compilation errors with the new gcc/g++ 4.6.
 It includes changes to Makefile flags and explicit inclusion of some header
 files.
 .
 The fix has been submitted upstream in svn rev 1010 and will be
 included in new upstream release. 
Bug-debian: http://bugs.debian.org/625094
Origin: upstream, http://dmtcp.svn.sourceforge.net/viewvc/dmtcp?view=revision&revision=1010
Author: Kapil Arya <kapil@ccs.neu.edu>
Applied-Upstream: svn rev 1010
Last-Update: 2011-05-29
--- a/dmtcp/src/Makefile.am
+++ b/dmtcp/src/Makefile.am
@@ -66,7 +66,7 @@
 
 dmtcp_inspector_SOURCES = dmtcp_inspector.cpp
 
-dmtcphijack_so_LDFLAGS = -shared -avoid-version -module
+dmtcphijack_so_LDFLAGS = -shared -module
 
 #dmtcp_nocheckpoint_LDFLAGS = -static
 
--- a/dmtcp/src/Makefile.in
+++ b/dmtcp/src/Makefile.in
@@ -320,7 +320,7 @@
 # This should be a superset of all optional files.
 EXTRA_dmtcphijack_so_SOURCES = pthreadwrappers.cpp synchronizationlogging.cpp
 dmtcp_inspector_SOURCES = dmtcp_inspector.cpp
-dmtcphijack_so_LDFLAGS = -shared -avoid-version -module
+dmtcphijack_so_LDFLAGS = -shared -module
 
 #dmtcp_nocheckpoint_LDFLAGS = -static
 
--- a/dmtcp/src/dmtcpalloc.h
+++ b/dmtcp/src/dmtcpalloc.h
@@ -33,6 +33,7 @@
 #include <iostream>
 #include <sstream>
 #include <fstream>
+#include <cstddef>
 
 #define DMTCPSTRING    dmtcp::string
 #define DMTCPVECTOR(T) dmtcp::vector<T>
--- a/dmtcp/src/dmtcpworker.cpp
+++ b/dmtcp/src/dmtcpworker.cpp
@@ -168,8 +168,10 @@
 //   (Matlab needs this or else it segfaults on restart, and bash plays
 //   similar tricks with maintaining its own environmnet.)
 // Used in mtcpinterface.cpp and signalwrappers.cpp.
-__attribute__ ((visibility ("hidden")))
-int _determineMtcpSignal(){
+// FIXME: DO we still want it to be library visible only?
+//__attribute__ ((visibility ("hidden")))
+int dmtcp::DmtcpWorker::determineMtcpSignal()
+{
   // this mimics the MTCP logic for determining signal number found in
   // mtcp_init()
   int sig = MTCP_DEFAULT_SIGNAL;
@@ -228,7 +230,7 @@
 
   //This is called for side effect only.  Force this function to call
   // getenv("MTCP_SIGCKPT") now and cache it to avoid getenv calls later.
-  _determineMtcpSignal();
+  determineMtcpSignal();
 
 #ifdef __i386__
   // Match work begun in dmtcpPrepareForExec()
--- a/dmtcp/src/dmtcpworker.h
+++ b/dmtcp/src/dmtcpworker.h
@@ -121,6 +121,7 @@
 
       void useAlternateCoordinatorFd();
 
+      static int determineMtcpSignal();
       static size_t argvSize() {return _argvSize;};
       static size_t envSize() {return _envSize;};
 
--- a/dmtcp/src/mtcpinterface.cpp
+++ b/dmtcp/src/mtcpinterface.cpp
@@ -859,11 +859,11 @@
   //   don't think someone else is using their SIG_CKPT signal.
 void dmtcp::shutdownMtcpEngineOnFork()
 {
-  int _determineMtcpSignal(); // from signalwrappers.cpp
   // Remove our signal handler from our SIG_CKPT
   errno = 0;
-  JWARNING (SIG_ERR != _real_signal(_determineMtcpSignal(), SIG_DFL))
-           (_determineMtcpSignal())
+  JWARNING (SIG_ERR != _real_signal(dmtcp::DmtcpWorker::determineMtcpSignal(),
+                                    SIG_DFL))
+           (dmtcp::DmtcpWorker::determineMtcpSignal())
            (JASSERT_ERRNO)
            .Text("failed to reset child's checkpoint signal on fork");
   _get_mtcp_symbol ( REOPEN_MTCP );
--- a/dmtcp/src/signalwrappers.cpp
+++ b/dmtcp/src/signalwrappers.cpp
@@ -19,6 +19,7 @@
  *  <http://www.gnu.org/licenses/>.                                         *
  ****************************************************************************/
 
+#include "dmtcpworker.h"
 #include "mtcpinterface.h"
 #include "syscallwrappers.h"
 #include  "../jalib/jassert.h"
@@ -46,8 +47,7 @@
 
 
 static int bannedSignalNumber(){
-  int _determineMtcpSignal(); // from signalwrappers.cpp
-  const int cache = _determineMtcpSignal();
+  const int cache = dmtcp::DmtcpWorker::determineMtcpSignal();
   return cache;
 }
 
--- a/dmtcp/src/uniquepid.cpp
+++ b/dmtcp/src/uniquepid.cpp
@@ -35,9 +35,16 @@
 #include "syscallwrappers.h"
 #include "protectedfds.h"
 
-static dmtcp::string checkpointFilename_str;
-static dmtcp::string ckptFilesDirName_str;
-
+static dmtcp::string& ckptDirName()
+{
+  static dmtcp::string str;
+  return str;
+}
+static dmtcp::string& ckptFileName()
+{
+  static dmtcp::string str;
+  return str;
+}
 inline static long theUniqueHostId(){
 #ifdef USE_GETHOSTID
   return ::gethostid()
@@ -146,7 +153,7 @@
 
 const char* dmtcp::UniquePid::checkpointFilename()
 {
-  if ( checkpointFilename_str.empty() )
+  if ( ckptFileName().empty() )
   {
     dmtcp::ostringstream os;
 
@@ -163,31 +170,30 @@
 #endif
        << CKPT_FILE_SUFFIX;
 
-    checkpointFilename_str = os.str();
+    ckptFileName() = os.str();
   }
 
 #ifdef UNIQUE_CHECKPOINT_FILENAMES
   // Include 5-digit generation number in filename, which changes
   //   after each checkpoint, during same process
-  JASSERT( Util::strEndsWith(checkpointFilename_str, CKPT_FILE_SUFFIX) )
-	 ( checkpointFilename_str )
-	 .Text ( "checkpointFilename_str doesn't end in .dmtcp" );
-  sprintf((char *)checkpointFilename_str.c_str()
-	  + checkpointFilename_str.length() - strlen("XXXXX" CKPT_FILE_SUFFIX),
+  JASSERT( Util::strEndsWith(ckptFileName(), CKPT_FILE_SUFFIX) )
+	 ( ckptFileName() )
+	 .Text ( "ckptFileName() doesn't end in .dmtcp" );
+  sprintf((char *)ckptFileName().c_str()
+	  + ckptFileName().length() - strlen("XXXXX" CKPT_FILE_SUFFIX),
 	  "%5.5d%s", ThisProcess().generation(), CKPT_FILE_SUFFIX);
 #endif
-  return checkpointFilename_str.c_str();
+  return ckptFileName().c_str();
 }
 
 dmtcp::string dmtcp::UniquePid::checkpointFilesDirName()
 {
-  if ( ckptFilesDirName_str.empty() ) {
-    ckptFilesDirName_str = jalib::Filesystem::BaseName(checkpointFilename());
-    ckptFilesDirName_str.erase(ckptFilesDirName_str.length() - 
-                                   strlen(CKPT_FILE_SUFFIX));
-    ckptFilesDirName_str += CKPT_FILES_SUBDIR_SUFFIX;
+  if ( ckptDirName().empty() ) {
+    ckptDirName() = jalib::Filesystem::BaseName(checkpointFilename());
+    ckptDirName().erase(ckptDirName().length() - strlen(CKPT_FILE_SUFFIX));
+    ckptDirName() += CKPT_FILES_SUBDIR_SUFFIX;
   }
-  return ckptFilesDirName_str;
+  return ckptDirName();
 }
 
 dmtcp::string dmtcp::UniquePid::dmtcpTableFilename()
@@ -334,8 +340,8 @@
   parentProcess() = ThisProcess();
   JTRACE ( "Explicitly setting process UniquePid" ) ( newId );
   theProcess() = newId;
-  checkpointFilename_str.clear();
-  ckptFilesDirName_str.clear();
+  ckptFileName().clear();
+  ckptDirName().clear();
 }
 
 bool dmtcp::UniquePid::isNull() const
--- a/mtcp/Makefile
+++ b/mtcp/Makefile
@@ -59,8 +59,8 @@
 
 #Currently sometimes can't link libmtcp.so without CFLAGS=-O0
 CFLAGS += -O0 -g
-#CFLAGS = -O0 -g -DDEBUG -DTIMING -Wall
-# CFLAGS = -O0 -g -DDMTCP_DEBUG -DTIMING -Wall
+#CFLAGS += -O0 -g -DDEBUG -DTIMING -Wall
+#CFLAGS += -O0 -g -DDMTCP_DEBUG -DTIMING -Wall
 # Try:  env CFLAGS=-DTEST_FORKED_CHECKPOINTING to CFLAGS  make
 #  	 to enable standalone invocation of forked checkpointing.
 # Could add something like -Wl,-soname,libmtcp.so.1 if one wants to globally
