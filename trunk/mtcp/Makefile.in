##+++2006-05-03
##    Copyright (C) 2006  Mike Rieker, Beverly, MA USA
##    Additions by Gene Cooperman to work with x86-64 architecture
##    EXPECT it to FAIL when someone's HeALTh or PROpeRTy is at RISk
##
##    This program is free software; you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation; version 2 of the License.
##
##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with this program; if not, write to the Free Software
##    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##---2006-05-03

@SET_MAKE@
LN_S=@LN_S@ -f
MKDIR_P=@MKDIR_P@
CC=@CC@
M32=@M32@
DEBUG=@DEBUG@
FAST_RESTART=@FAST_RESTART@
HBICT_DELTACOMP=@HBICT_DELTACOMP@
INFINIBAND_SUPPORT=@INFINIBAND_SUPPORT@
PTRACE_SUPPORT=@PTRACE_SUPPORT@
RUN_AS_ROOT=@RUN_AS_ROOT@
HAS_JAVA=@HAS_JAVA@
HAS_SSH=@HAS_SSH@
PACKAGE=@PACKAGE_TARNAME@
PACKAGE_TARNAME=@PACKAGE_TARNAME@-@PACKAGE_VERSION@
VERSION=@PACKAGE_VERSION@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@
bindir=@bindir@
libdir=@libdir@
docdir=@docdir@
includedir=@includedir@
mandir=@mandir@
infodir=@mandir@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
srcdir = @srcdir@
VPATH = @srcdir@
targetdir = $(top_builddir)

ifeq ($(M32),1)
  targetdir = $(top_builddir)/lib/$(PACKAGE)/32
endif

##########################################################################
##									##
##  Compile and link the shareable, restore utility and test programs	##
##									##
##  Versions tested with:						##
##    binutils-2.15.92, 2.16.1, 2.18.1, 2.19.1				##
##    glibc-2.3.4, 2.3.6, 2.7.12, 2.7, 2.9				##
##    linux-2.6.9-34, 2.6.9-78, 2.6.10, 2.6.14, 2.6.25, 2.6.26		##
##    gcc-3.4.4, 4.0.2, 4.1.3, 4.3.2					##
##									##
##########################################################################

MTCP_VERSION = 82
LIBMTCP_SOVERSION_MAJOR=1
LIBMTCP_SOVERSION_INFO=$(LIBMTCP_SOVERSION_MAJOR).0.0

ifeq ($(M32),1)
  MTCP_RESTART=mtcp_restart-32
else
  MTCP_RESTART=mtcp_restart
endif

# EXPERIMENTAL FEATURE:  checkpointing 32-bit images on 64-bit machines:
# Invoke as "make M32=1" to create 32-bit image on 64-bit machine.
# NOTE:  This also requires a modified HIGHEST_VA in mtcp_internal.h.  WHY?

# If we're running under linux32 on a 64-bit O/S, set mixed mode:  M32=1
ifneq (${shell uname -m},x86_64)
ifeq (${shell setarch x86_64 uname -m 2>/dev/null},x86_64)
M32=1
endif
endif

ifeq ($(M32),1)
# HIGHEST_VA is [vdso] (just above [stack])
CC = gcc -m32 -Wa,--32 -DHIGHEST_VA='(VA)0xffffe000'
UNAME = linux32 uname
LD_RAW = ld -m32 -melf_i386
MTCP_LDFLAGS += ${LDFLAGS} -Wl,-m32 -Wl,-melf_i386 -shared
AS = as
else
CC = gcc
UNAME = uname
LD_RAW = ld
MTCP_LDFLAGS +=  ${LDFLAGS} -shared
AS = as --32
endif

ifdef DMTCP_VERSION
  MTCP_CFLAGS += -DDMTCP_VERSION=\"$(DMTCP_VERSION)\"
endif

ifeq ($(DEBUG),yes)
  MTCP_CFLAGS += -Wall
endif

ifeq ($(FAST_RESTART),yes)
  MTCP_CFLAGS += -DFAST_RST_VIA_MMAP
endif

ifeq ($(HBICT_DELTACOMP),yes)
  MTCP_CFLAGS += -DHBICT_DELTACOMP
endif

ifeq ($(INFINIBAND_SUPPORT),yes)
  MTCP_CFLAGS += -DIBV
endif

ifeq ($(PTRACE_SUPPORT),yes)
  MTCP_CFLAGS += -DPTRACE
endif

ifeq ($(RUN_AS_ROOT),yes)
  MTCP_CFLAGS += -DRUN_AS_ROOT
endif

USE_PROC_MAPS = 1
ifdef USE_PROC_MAPS
  MTCP_CFLAGS += -DUSE_PROC_MAPS
endif

#Currently sometimes can't link libmtcp.so without MTCP_CFLAGS=-O0
MTCP_CFLAGS += ${CFLAGS} ${CPPFLAGS} -O0 -g

# Use this for standalone MTCP debugging to stderr, or DMTCP debugging to
#   stderr (and to jassertlog.* , if configured with --enable-debug)
# MTCP_CFLAGS += ${CFLAGS} ${CPPFLAGS} -O0 -g -DDEBUG -DTIMING -Wall
# Try:  env MTCP_CFLAGS=-DTEST_FORKED_CHECKPOINTING to MTCP_CFLAGS  make
#  	 to enable standalone invocation of forked checkpointing.

MTCP_LDFLAGS += -Wl,-soname,libmtcp.so.$(LIBMTCP_SOVERSION_MAJOR)

LD = ${CC}
OBJCOPY = objcopy
ASFLAGS =

# There might be a 32-bit built system running on top of 32/64 bit capable
# kernel.  Or, we might be cross-compiling (e.g., Debian binary packages).
# In those cases `uname -m` returns 'x86_64' which is not correct.
# Instead, we should deduce the build-type from the build toolchain itself.
ifndef BUILDING_UTIL_ARCH
  BUILDTYPE=${shell make BUILDING_UTIL_ARCH=1 util-arch > /dev/null; \
                    util-arch}
endif

ifdef USE_PROC_MAPS
  MTCP_CFLAGS += -fPIC -DPIC
  MTCP_LDFLAGS += -fPIC
else
  # But for testmtcp, don't use MTCP_CFLAGS if don't want position-independent code
  ifeq ($(BUILDTYPE),x86_64)
    MTCP_CFLAGS += -fPIC -DPIC
    MTCP_LDFLAGS += -fPIC
  endif

  ifeq ($(BUILDTYPE),arm)
  # When armv6 is the default, add  -march=armv7;  (usually not needed anymore)
    MTCP_CFLAGS += -fPIC -DPIC
    MTCP_LDFLAGS += -fPIC
  endif
endif

ifeq ($(BUILDTYPE),arm)
  ARM_EXTRAS = ${LIBC_DO_SYSCALL_ARM_O}
# As of February, 2012, crt1.o has an undefined symbol, abort.
# This prevents us from compiling mtcp_restart with -nodefaultlibs
  ARM_BUG_FIX = -Wl,-defsym=abort=0x0
# ARM: "r7" is also used as frame pointer.  So, gcc complains in mtcp_futex.h
  CFLAGS_FUTEX_ARM = -fomit-frame-pointer
endif

ifeq ($(shell ${CC} -v --help 2>&1 | grep stack-protector|head -1|wc -l), 1)
  MTCP_CFLAGS+=-fno-stack-protector
  FSTACK_PROTECTOR=-fstack-protector
endif

all default: build tests readmtcp

install-libs: build
	install -D $(targetdir)/bin/$(MTCP_RESTART) $(DESTDIR)$(bindir)
	install -D $(targetdir)/lib/libmtcp.so.$(LIBMTCP_SOVERSION_INFO) \
	  $(DESTDIR)$(libdir)
	install -D $(targetdir)/lib/libmtcp.so.$(LIBMTCP_SOVERSION_MAJOR) \
	  $(DESTDIR)$(libdir)
	install -D $(targetdir)/lib/libmtcp.so $(DESTDIR)$(libdir)

uninstall-libs:
	rm -f "$(DESTDIR)$(bindir)/$(MTCP_RESTART)"
	rm -f "$(DESTDIR)$(libdir)"/libmtcp.so*

install: build install-libs
	install -D $(srcdir)/mtcp.h $(DESTDIR)$(includedir)

uninstall: uninstall-libs
	rm -f "$(DESTDIR)$(includedir)/mtcp.h"

util-arch: util-arch.c
	${CC} -o $@ $<

readmtcp: readmtcp.c mtcp_internal.h mtcp_util.o \
	mtcp_printf.o mtcp_state.o mtcp_safemmap.o ${LIBC_DO_SYSCALL_ARM_O}
	${CC} ${MTCP_CFLAGS} -o readmtcp $< mtcp_util.o \
	  mtcp_printf.o mtcp_state.o mtcp_safemmap.o ${LIBC_DO_SYSCALL_ARM_O}

build: $(targetdir)/lib/libmtcp.so $(targetdir)/bin/$(MTCP_RESTART)
# Don't do bigtestmtcp by default; Good for stress testing, but slow.
# Don't do testmtcp6 by default: Would pull in readline.
tests: build testmtcp testmtcp2 testmtcp3 testmtcp4 testmtcp5 threadtest

# Test programs

testmtcp: testmtcp.o libmtcp.so
	env LD_LIBRARY_PATH=. ${CC} $(MTCP_CFLAGS) -o testmtcp testmtcp.o -Wl,--export-dynamic libmtcp.so
	# libtool --mode=link gcc -o testmtcp testmtcp.o -Wl,--export-dynamic libmtcp.so

bigtestmtcp: bigtestmtcp.o libmtcp.so
	env LD_LIBRARY_PATH=. ${CC} $(MTCP_CFLAGS) -o bigtestmtcp bigtestmtcp.o -Wl,--export-dynamic libmtcp.so

testgettimeofday: testgettimeofday.o libmtcp.so
	env LD_LIBRARY_PATH=. ${CC} $(MTCP_CFLAGS) \
	  -o testgettimeofday testgettimeofday.o -Wl,--export-dynamic libmtcp.so
testgettimeofday.o: testgettimeofday.c
	${CC} $(MTCP_CFLAGS) -c -o testgettimeofday.o testgettimeofday.c
checkgettimeofday: libmtcp.so mtcp_restart testgettimeofday
	(sleep 5; pkill testgettimeofda) &
	env LD_LIBRARY_PATH=. ./testgettimeofday || true
	@ echo ""
	@ echo Successfully killed after checkpoint.  Will now restart.
	sleep 2
	(sleep 5; pkill mtcp_restart) &
	./mtcp_restart testgettimeofday.mtcp || true
	@ echo Kill this program now after being satisfied it still works.
	@ echo ""
	sleep 2
	./mtcp_restart testgettimeofday.mtcp

testmtcp.o: testmtcp.c
	${CC} $(MTCP_CFLAGS) -c -o testmtcp.o testmtcp.c

testmtcp2: testmtcp2.c libmtcp.so $(ARM_EXTRAS)
	${CC} $(MTCP_CFLAGS) $(CFLAGS_FUTEX_ARM) -o testmtcp2 $< \
	  libmtcp.so $(ARM_EXTRAS)

testmtcp3: testmtcp3.c libmtcp.so
	${CC} $(MTCP_CFLAGS) -o testmtcp3 $< libmtcp.so -lpthread -Xlinker -Map -Xlinker testmtcp3.map

testmtcp4: testmtcp4.c libmtcp.so
	${CC} $(MTCP_CFLAGS) -o testmtcp4 $< libmtcp.so -lpthread -Xlinker -Map -Xlinker testmtcp4.map

testmtcp5: testmtcp5.c libmtcp.so
	${CC} $(MTCP_CFLAGS) -o testmtcp5 $< libmtcp.so

# Makefile should not fail on testmtcp6 if -lreadline or -lhistory is missing.
testmtcp6: testmtcp6.c libmtcp.so
	- ${CC} $(MTCP_CFLAGS) -Wl,--export-dynamic -o testmtcp6 $< libmtcp.so \
	  -lreadline -lhistory

threadtest: threadtest.c
	${CC} $(MTCP_CFLAGS) -o threadtest $<

# This is the command-line utility to restore a process
# NOTE: Compile/build mtcp_restart with -nodefaultlibs. See the following
#       explanation.
# RedHat doesn't provide the static libc in their standard
# repository. We want to have mtcp_restart statically linked for the sake
# of VDSO placement and ASLR. Thus we decided to remove the dependency of
# mtcp_restart on libc by rewriting some glibc function calls and
# replacing the glibc-syscall wrappers with the respective mtcp_sys_XXX()
# version.

$(targetdir)/bin/$(MTCP_RESTART): mtcp_restart.c mtcp_internal.h mtcp_sys.h \
	mtcp_printf.o mtcp_util.o mtcp_maybebpt.o \
	mtcp_safemmap.o mtcp_state.o mtcp_safe_open.o \
	mtcp_check_vdso.o ${ARM_EXTRAS}
	${CC} $(MTCP_CFLAGS) ${ARM_BUG_FIX} -static -nodefaultlibs \
	 mtcp_maybebpt.o mtcp_printf.o mtcp_util.o mtcp_safemmap.o \
	 mtcp_state.o mtcp_safe_open.o \
	 mtcp_check_vdso.o ${ARM_EXTRAS} -o $@ $<

ifeq ($(BUILDTYPE),arm)
LIBC_DO_SYSCALL_ARM_O = libc-do-syscall-arm.o
${LIBC_DO_SYSCALL_ARM_O}: libc-do-syscall-arm.S
	${CC} ${MTCP_CFLAGS} -c -o $@ $<
endif

#not used:
# # mtcp_restart.so is used only by dmtcp --- not by mtcp
# mtcp_restart.so: mtcp_restart.c mtcp_internal.h mtcp_maybebpt.o \
#   mtcp_printf.o mtcp_safe_open.o mtcp_util.o mtcp_safemmap.o mtcp_state.o
# 	# ${CC} $(MTCP_CFLAGS) -shared -Wl,--no-allow-shlib-undefined
# 	${CC} $(MTCP_CFLAGS) -shared \
# 	 -o mtcp_restart.so mtcp_restart.c mtcp_maybebpt.o \
# 	 mtcp_printf.o mtcp_util.o mtcp_safemmap.o mtcp_state.o \
# 	 mtcp_safe_open.o

LIBRARY_OBJS = mtcp.o mtcp_writeckpt.o mtcp_restart_nolibc.o \
	mtcp_maybebpt.o mtcp_printf.o mtcp_util.o \
	mtcp_safemmap.o mtcp_safe_open.o \
	mtcp_state.o mtcp_check_vdso.o mtcp_sigaction.o \
	${ARM_EXTRAS}

# for libtools -- not used
%.lo : %.c
	libtool --mode=compile gcc -c $(MTCP_CFLAGS) $<

ifndef USE_PROC_MAPS
# This is the shareable that a user links with the application

# mtcp.t originally generated as below via:  ld -shared --verbose.
# It was modified to include shareable_begin/end sections.
# The patch was then created with:  diff -c mtcp.t mtcp.tnew > mtcp.t.patch
# Do not replace ld by ${LD} ${MTCP_LDFLAGS} in generating mtcp.t.
mtcp.t: mtcp.t.patch-i386 mtcp.t.patch-x86_64
	rm -f mtcp.t
	${LD_RAW} -shared --verbose > mtcp.t
	sed -i -e '1,/========================/ d' mtcp.t
	sed -i -e '/========================/,$$ d' mtcp.t
	rm -f mtcp.t-fail
	if test ${BUILDTYPE} = x86_64; then \
	  if patch mtcp.t mtcp.t.patch-x86_64; then \
	    :; \
	  else \
	    mv mtcp.t mtcp.t-fail; false; \
	  fi \
	else \
	  if patch mtcp.t mtcp.t.patch-i386; then \
	    :; \
	  else \
	    mv mtcp.t mtcp.t-fail; false; \
	  fi \
	fi

libmtcp.so: mtcp.t ${LIBRARY_OBJS}
	##ld -shared -Map mtcp.map -o libmtcp.so mtcp.lo mtcp_restart_nolibc.lo --verbose
	#   this gets a default .t file so it can be chopped up.
	# mtcp.t adds two sections to mark begin/end of libmtcp.so text/data.
	#   --no-gc-sections, --no-strip-discarded in case default options
	#   want to garbage collection the MTCP sections, and strip its symbols
	echo LD $(LD)
	echo MTCP_LDFLAGS $(MTCP_LDFLAGS)
	${LD} ${MTCP_LDFLAGS} -T mtcp.t -Wl,-Map,mtcp.map \
	  -Wl,--no-gc-sections -Wl,--no-strip-discarded \
	  -o libmtcp.so.$(LIBMTCP_SOVERSION_INFO) ${LIBRARY_OBJS} \
	  -ldl -lpthread -lm -z defs
	ln -sf libmtcp.so.$(LIBMTCP_SOVERSION_INFO) \
	  libmtcp.so.$(LIBMTCP_SOVERSION_MAJOR)
	ln -sf libmtcp.so.$(LIBMTCP_SOVERSION_MAJOR) libmtcp.so
	# We need to set ALLOC, or 'eu-strip --remove-comment' will strip our
	# section on Red Hat-based machines w/ debuginfo repository.
	# Redirect stderr to suppress warning that section is not in a segment.
	# (Warning caused by ALLOC section outside of normal .data section.)
	#In SUSE LINUX 10.0 (i586) OSS, we need to back up the libmtcp.so,
	# since objcopy fails, and also corrupts libmtcp.so.
	cp ./libmtcp.so.$(LIBMTCP_SOVERSION_INFO) ./libtmp.so
	${OBJCOPY} --set-section-flags=.the.begin=LOAD,ALLOC,CONTENTS,DATA \
	  ./libmtcp.so.$(LIBMTCP_SOVERSION_INFO) 2>/dev/null || \
	  echo MTCP: Warning: "'${OBJCOPY}'" failed. && \
	  cp ./libtmp.so ./libmtcp.so.$(LIBMTCP_SOVERSION_INFO)
	${OBJCOPY} --set-section-flags=.the.end=LOAD,ALLOC,CONTENTS,DATA \
	  ./libmtcp.so.$(LIBMTCP_SOVERSION_INFO) 2>/dev/null || \
	  echo MTCP: Warning: "'${OBJCOPY}'" failed. && \
	  cp ./libtmp.so ./libmtcp.so.$(LIBMTCP_SOVERSION_INFO)
	rm -f ./libtmp.so
	@nm -D libmtcp.so.$(LIBMTCP_SOVERSION_INFO) | grep ' [BTD] ' | \
	  grep -v ' d\?mtcp_' | \
	  grep -v '__bss_start\|_edata\|_end' | \
	  grep -v clone | grep -v '_fini\|init' | grep ' [BTD] ' 1>&2 && \
	  echo '*** WARNING: libmtcp.so.$(LIBMTCP_SOVERSION_INFO): ' \
	       'MTCP symbols polluting user namespace' 1>&2 || true
else
$(targetdir)/lib/libmtcp.so: ${LIBRARY_OBJS}
	${LD} ${MTCP_LDFLAGS}  ${LIBRARY_OBJS} \
	  -ldl -lpthread -lm \
	  -o $(targetdir)/lib/libmtcp.so.$(LIBMTCP_SOVERSION_INFO)
	( cd $(targetdir)/lib && \
	  ln -sf libmtcp.so.$(LIBMTCP_SOVERSION_INFO) \
	  libmtcp.so.$(LIBMTCP_SOVERSION_MAJOR) )
	( cd $(targetdir)/lib && \
	  ln -sf libmtcp.so.$(LIBMTCP_SOVERSION_MAJOR) libmtcp.so )
	@nm -D $@ | grep ' [BTD] ' | \
	  grep -v ' d\?mtcp_' | \
	  grep -v '__bss_start\|_edata\|_end' | \
	  grep -v clone | grep -v '_fini\|init' | grep ' [BTD] ' 1>&2 && \
	  echo '*** WARNING: libmtcp.so.$(LIBMTCP_SOVERSION_INFO): ' \
	       'MTCP symbols polluting user namespace' 1>&2 || true
endif

# To generate mtcp.o with listing, use "-Wa,-adhl=mtcp.lis"
mtcp.o: mtcp.c mtcp.h mtcp_internal.h mtcp_sys.h
	${CC} $(MTCP_CFLAGS) -c -o mtcp.o $<

mtcp_writeckpt.o: mtcp_writeckpt.c mtcp.h mtcp_internal.h mtcp_sys.h mtcp_util.h
	${CC} $(MTCP_CFLAGS) -c -o mtcp_writeckpt.o $<

# Use uname instead of ${UNAME} below to determine if this is really 64-bit.
mtcp_restart_nolibc.o: mtcp_restart_nolibc.c mtcp.h mtcp_internal.h
	${CC} $(MTCP_CFLAGS) -c -o mtcp_restart_nolibc.o $<

# mtcp.lis is needed only for debugging.
#mtcp.lis: mtcp.c mtcp.h mtcp_internal.h mtcp_sys.h
#	${CC} $(MTCP_CFLAGS) -c -o /dev/null -Wa,-ahls=mtcp.lis mtcp.c

# The resultant mtcp_restart_nolibc.o module should not have undefined symbols
# ... if it did, they would get linked to /lib/libc.so at runtime and
# ... the restart wouldn't work as /lib/libc.so isn't in memory
#   during the restart
# It also cannot have global symbols like 'read' undefined in one module, defined
# ... by another, as the loader will also re-direct those references to /lib/libc.so


# -fstack-protector for hardening-check for debian-unstable (May 2012).
mtcp_maybebpt.o: mtcp_maybebpt.c mtcp_internal.h
	${CC} $(MTCP_CFLAGS) $(FSTACK_PROTECTOR) -c -o mtcp_maybebpt.o $<

mtcp_safe_open.o: mtcp_safe_open.c mtcp_internal.h
	${CC} $(MTCP_CFLAGS) -c -o mtcp_safe_open.o $<

mtcp_printf.o: mtcp_printf.c mtcp_internal.h
	${CC} $(MTCP_CFLAGS) -c -o mtcp_printf.o $<

mtcp_util.o: mtcp_util.c mtcp_internal.h mtcp_util.h
	${CC} $(MTCP_CFLAGS) -c -o mtcp_util.o $<

mtcp_safemmap.o: mtcp_safemmap.c mtcp_internal.h
	${CC} $(MTCP_CFLAGS) -c -o mtcp_safemmap.o $<

mtcp_state.o: mtcp_state.c mtcp_internal.h mtcp_futex.h
	${CC} $(MTCP_CFLAGS) $(CFLAGS_FUTEX_ARM) -c -o mtcp_state.o $<

mtcp_state.lis: mtcp_state.c mtcp_internal.h
	${CC} $(MTCP_CFLAGS) -c -o /dev/null -Wa,-ahls=mtcp_state.lis $<

mtcp_check_vdso.o: mtcp_check_vdso.c
	${CC} $(MTCP_CFLAGS) -c -o mtcp_check_vdso.o $<

extractobjectmodule: extractobjectmodule.c
	${CC} $(MTCP_CFLAGS) -o extractobjectmodule $<

mtcp_sigaction.o: mtcp_sigaction.c mtcp_sys.h
	${CC} $(MTCP_CFLAGS) -c -o mtcp_sigaction.o $<

dist: distclean
	rm -f /tmp/mtcpv${MTCP_VERSION}
	dir=`pwd`; cd ..; cp -r ./`basename $$dir` /tmp/mtcpv${MTCP_VERSION}; \
	 cd  /tmp; tar czvf mtcpv${MTCP_VERSION}.tgz --exclude-vcs \
	 ./mtcpv${MTCP_VERSION}
	rm -rf /tmp/mtcpv${MTCP_VERSION}
	mv /tmp/mtcpv${MTCP_VERSION}.tgz ../
	ls -l ../mtcpv${MTCP_VERSION}.tgz

# check: default testmtcp
# On recent 32-bit kernels, restart fails in "make", but succeeds manually.
# WHY?
check: build testmtcp
	@ echo ""
	@ echo Type into program to verify it operates.  Will be killed in 13 s.
	@ echo ""
	(sleep 13; pkill -9 testmtcp) &
	env LD_LIBRARY_PATH=$(targetdir)/lib ./testmtcp || true
	@ echo ""
	@ echo Successfully killed after checkpoint.  Will now restart.
	@ echo Continue typing arbitrary text into program to test that
	@ echo it still works, and that checkpoint of a restart works.
	sleep 5
	$(targetdir)/bin/$(MTCP_RESTART) testmtcp.mtcp
	echo FINISH EARLY FOR NOW
	exit 1
	(sleep 13; pkill -9 $(MTCP_RESTART)) & $(targetdir)/bin/$(MTCP_RESTART) testmtcp.tmp || true
	@ echo Kill this program now after being satisfied it still works.
	@ echo ""
	sleep 5
	$(targetdir)/bin/$(MTCP_RESTART) testmtcp.mtcp

distclean: clean
	rm -f *~ mtcp.kdevses mtcp.kdevelop.* testmtcp{,1,2,3,4}.mtcp \
	      *.lis a.out mtcp.t.orig mtcp.lis util-arch readmtcp

clean:
	rm -f *.o *.map mtcp_restart_noblibc.lis \
	      testmtcp.mtcp $(targetdir)/lib/libmtcp.so* mtcp.t mtcp.t-fail \
	      $(targetdir)/bin/$(MTCP_RESTART) extractobjectmodule readmtcp \
	      x.x zz.out testmtcp testmtcp[0-9] threadtest bigtestmtcp
