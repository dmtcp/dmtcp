@SET_MAKE@
LN_S=@LN_S@
CC=@CC@
CXX=@CXX@
ifdef M32
CFLAGS =-m32 -Wl,-m32 -Wl,-melf_i386 -Wa,--32 @CFLAGS@
CXXFLAGS=-m32 -Wl,-m32 -Wl,-melf_i386 -Wa,--32 @CXXFLAGS@
else
CFLAGS=@CFLAGS@
CXXFLAGS=@CXXFLAGS@
endif

ifndef M32
HAS_READLINE=@HAS_READLINE@
READLINE_LIBS=-lreadline -lhistory -lcurses
HAS_MPICH=@HAS_MPICH@
MPICH_MPICC=@MPICH_MPICC@
HAS_OPENMPI=@HAS_OPENMPI@
OPENMPI_MPICC=@OPENMPI_MPICC@
endif

PWD=$(shell pwd)

TESTS=${basename ${shell ls *.c *.cpp | grep -v '^hellompi.c'}} \
	hellompich helloOpenMPI

tests: $(TESTS)
	cd ../module && ${MAKE}
	${MAKE} -C credentials

tidy:
	rm -f ckpt_* dmtcp_restart_script* \
	  dmtcp-shared-memory.* dmtcp-test-typescript.tmp core*

clean distclean: tidy
	rm -f $(TESTS) *.pyc *.so
	${MAKE} -C credentials clean

readline: readline.c
ifeq ($(HAS_READLINE),yes)
	$(CC) -o $@ $< $(CFLAGS) $(READLINE_LIBS)
else
	#$<: required libraries missing, skipping test
endif

hellompich: hellompi.c
ifeq ($(HAS_MPICH),yes)
	$(MPICH_MPICC) -o $@ $< $(CFLAGS) 
else
	#$<: required libraries missing, skipping test
endif

helloOpenMPI: hellompi.c
ifeq ($(HAS_OPENMPI),yes)
	$(OPENMPI_MPICC) -o $@ $< $(CFLAGS) 
else
	#$<: required libraries missing, skipping test
endif

DMTCPAWARE_EXE=$(patsubst %.c,%,$(wildcard dmtcpaware*.c))
DMTCPAWARELIB=../dmtcpaware/libdmtcpaware.a

${DMTCPAWARE_EXE}: dmtcpaware%: dmtcpaware%.c ${DMTCPAWARELIB}
	-$(CC) -o $@ -I../dmtcpaware $< $(CFLAGS) $(DMTCPAWARELIB)
	# One can also do dynamic linking to libdmtcpaware.so as follows:
	# (cd ../dmtcp/src && ln -s libdmtcpaware.so.1.0.0 libdmtcpaware.so.1)
	# -$(CC) -o $@ $< $(CFLAGS) -L../dmtcp/src/ -ldmtcpaware

dmtcp3: dmtcp3.c
	-$(CC) -o $@ $< $(CFLAGS) -lpthread

dmtcp4: dmtcp4.c
	-$(CC) -o $@ $< $(CFLAGS) -lpthread

dmtcp5: dmtcp5.c
	-$(CC) -o $@ $< $(CFLAGS) -lpthread

# dlopen will dlopen/dlclose libdlopen-lib[12].so
libdlopen-lib1.so:
	${CC} -shared -fPIC  -DLIB1 -o libdlopen-lib1.so dlopen.c
libdlopen-lib2.so:
	${CC} -shared -fPIC  -DLIB2 -o libdlopen-lib2.so dlopen.c
dlopen: dlopen.c libdlopen-lib1.so libdlopen-lib2.so
	${CC} $(CFLAGS) -o $@ $< -ldl

%: %.c
	$(CC) -o $@ $< $(CFLAGS)

%: %.cpp
	$(CXX) -o $@ $< $(CXXFLAGS)
