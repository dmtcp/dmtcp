.\" Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.\" Please adjust this date whenever revising the manpage.
.\" 
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.TH "DMTCP" "1" "June 17, 2008" "Jason Ansel" "Distributed MultiThreaded CheckPointing"
.SH "NAME"
dmtcp \- Distributed MultiThreaded Checkpointing
.SH "SYNOPSIS"
.B dmtcp_coordinator
.RI [port]
.br 

.B dmtcp_checkpoint 
.RI command
.RI [args...]
.br 

.B dmtcp_restart
.RI ckpt1.mtcp
.RI [ckpt2.mtcp...]
.SH "DESCRIPTION"
\fBdmtcp\fP is a tool to transparently checkpointing the state of an arbitrary
group of programs spread across many machines and connected by sockets. It
does not modify the user's program nor the operating system.
.SH "OPTIONS"
Most options are controlled through environment variables.  These can be
set in bash with "export NAME=value" or in tcsh with "setenv NAME value".

.IP  DMTCP_CHECKPOINT_INTERVAL=integer
Time in seconds between automatic checkpoints.  Checkpoints can also be
initiated manually by typing 'c' into the coordinator. (default: 0, disabled;
dmtcp_coordinator only)

.IP  DMTCP_HOST=string
Hostname where the cluster\-wide coordinator is running. (default: localhost;
dmtcp_checkpoint, dmtcp_restart only)

.IP  DMTCP_PORT=integer
The port the cluster\-wide coordinator listens on. (default: 7779)

.IP  DMTCP_GZIP=(1|0)
Set to "0" to disable compression of checkpoint images. (default:0, compression
disabled; dmtcp_checkpoint only)

.IP  DMTCP_CHECKPOINT_DIR=path
Directory to store checkpoint images in. (default: ./)

.IP  DMTCP_SIGCKPT=integer
Signal number to use for checkpointing.  Must not be used by the user program.
(default: SIGUSR2; dmtcp_checkpoint only)
.SH "DMTCP_COORDINATOR"
A dmtcp_coordinator process must be started in order for either
dmtcp_checkpoint or dmtcp_restart to operate.  There should be exactly one
dmtcp_coordinator for each network of processes.  In the case of multiple
hosts, the address of the single global coordinator should be communicated
to dmtcp_checkpoint and dmtcp_restart through the DMTCP_HOST and DMTCP_PORT
environment variables.

The coordinator is stateless and is \fBnot\fR checkpointed.
The dmtcp_coordinator initiates checkpoints of all processes in the
system.  Checkpoints can be performed automatically on an interval (see
DMTCP_CHECKPOINT_INTERVAL above), or they can be initiated manually on the
command line of the coordinator.

The coordinator accepts the following commands on its standard input.
Each command should be followed by the <return> key.  The commands are: 
.br
  l : List connected nodes
.br 
  s : Print status message
.br 
  c : Checkpoint all nodes
.br 
  f : Force a restart even if there are missing nodes (debugging)
.br 
  k : Kill all nodes
.br 
  q : Kill all nodes and quit
.br 
  ? : Show this message
.SH "EXAMPLE USAGE"
.TP  
1. In a separate terminal window, start the dmtcp_coodinator.  (See previous section.)

 dmtcp_coordinator

.TP 
2. In separate terminal(s), replace each command(s) with "dmtcp_checkpoint [command]".  The checkpointed program will connect to the coordinator specified by DMTCP_HOST and DMTCP_PORT.  Child processes will automatically be checkpointed.  Remote processes started via \fIssh\fR will automatically checkpointed. (The \fIssh\fR command line with be modified to call dmtcp_checkpoint on the remote host.)

 dmtcp_checkpoint ./myprogram

.TP 
3. To manually initiate a checkpoint, type "c" followed by <return> into the coordinator.  Checkpoint files for each process will be written to DMTCP_CHECKPOINT_DIR. The dmtcp_coordinator will write "dmtcp_restart_script.sh" to its working directory.  This script contains the necessary calls to dmtcp_restart to restart the entire computation.

.TP 
4. To restart, one should use dmtcp_restart_script.sh created by the dmtcp_coordinator. One can optionally edit this script to migrate processes to different hosts.  In order to give a restarted program standard input, the script must be edited to run the desired process in the foreground of a terminal.

 ./dmtcp_restart_script.sh
.SH "PROGRAMMING HOOKS"
DMTCP allows checkpointed application to defined hook functions in order
perform added work at checkpoint time (such as closing connections to
non\-checkpointed processes).

User code containing these functions must be compiled with
\-Wl,\-export\-dynamic under \fIgcc\fR/\fIg++\fR.

These functions are:
.TP 
   void dmtcpHookPreCheckpoint(void);

Called before checkpointing after all user threads are suspended.
.TP 
   void dmtcpHookPostCheckpoint(void);

Called after checkpointing before all user threads are resumed.
.TP 
   void dmtcpHookRestart(void);

Called after a restart before all user threads are resumed.
.SH "SEE ALSO"
Full documentation is available from http://dmtcp.sourceforge.net/
.SH "AUTHORS"
DMTCP and its standalone single\-process compontent MTCP (MultiThreaded
CheckPointing) were created and are maintained by Jason Ansel, Kapil Arya,
Gene Cooperman, Mike Rieker, Ana Maria Visan, and Alex Brick.
