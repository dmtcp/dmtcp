CC = gcc
M32=0
CFLAGS = -g -O2
CPPFLAGS = 
CXX = g++
CXXFLAGS = -g -O2
LDFLAGS = 

# Allow the user to specify the install program.
INSTALL = /usr/bin/install -c
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_SCRIPT = ${INSTALL}

MKDIR_P = /usr/bin/mkdir -p
PACKAGE = dmtcp
PACKAGE_BUGREPORT = dmtcp-forum@lists.sourceforge.net
PACKAGE_NAME = DMTCP
PACKAGE_STRING = DMTCP 2.1
PACKAGE_TARNAME = dmtcp
PACKAGE_URL = http://dmtcp.sourceforge.net
PACKAGE_VERSION = 2.1
prefix=/usr/local
exec_prefix=${prefix}
datarootdir=${prefix}/share
bindir = ${exec_prefix}/bin
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
libdir = ${exec_prefix}/lib64
pkglibdir = $(libdir)/dmtcp
top_builddir = ../..
top_srcdir = ../..
srcdir = .

targetdir = $(top_builddir)

ifeq ($(M32),1)
  targetdir = $(top_builddir)/lib/$(PACKAGE)/32
  MTCP_RESTART=mtcp_restart-32
else
  MTCP_RESTART=mtcp_restart
endif

DMTCP_INCLUDE_PATH = $(top_srcdir)/include
JALIB_PATH = $(top_srcdir)/jalib

INCLUDES = -I$(JALIB_PATH) -I$(DMTCP_INCLUDE_PATH) \
	   -I$(top_builddir)/include -I$(srcdir) -I$(srcdir)/..
CFLAGS += -DHAVE_CONFIG_H -fPIC -g
CXXFLAGS += -DHAVE_CONFIG_H -fPIC -g
ifeq ($(M32),1)
CFLAGS += -m32 -Wa,--32
CXXFLAGS += -m32 -Wa,--32
LDFLAGS += -m32 -Wl,-m32 -Wl,-melf_i386 -Wa,--32
endif

COMPILE = $(CC) $(INCLUDES) $(CPPFLAGS) $(CFLAGS) -c -o $@
LINK = $(CC) $(CFLAGS) $(LDFLAGS) -o $@

ARM_EXTRAS = $(srcdir)/libc-do-syscall-arm.S
HEADERS = mtcp_util.ic mtcp_sys.h mtcp_util.h \
	  $(srcdir)/../membarrier.h $(DMTCP_INCLUDE_PATH)/procmapsarea.h

$(targetdir)/bin/$(MTCP_RESTART): mtcp_restart.o
	${LINK} -fPIC -g -O2 -nodefaultlibs ${ARM_EXTRAS} $<

# We need to compile mtcp_restart.c with "-fno-stack-protector" to avoid
# runtime stack smashing detection.
# We also need to build mtcp_restart without optimization (-O0), otherwise it
# may fail to restart. Since these three objects are fairly low level, we avoid
# any surprises by compiling them without any optimization.
mtcp_restart.o: mtcp_restart.c $(HEADERS)
	$(COMPILE) -DPIC -fPIC -fno-stack-protector -g -O0 $<

build: $(targetdir)/bin/$(MTCP_RESTART)
default: build
libs: build
all: default

gdb: build_mtcp_restart_debug gdb_run

build_mtcp_restart_debug:
	rm -f mtcp_restart.o
	make MTCP_CFLAGS=-DDEBUG mtcp_restart.o

gdb_run: $(targetdir)/bin/$(MTCP_RESTART) ckpt_dmtcp1_test.dmtcp
	offset=`./text_offset.sh $(targetdir)/bin/$(MTCP_RESTART)` ; \
	       gdb --args $(targetdir)/bin/$(MTCP_RESTART) \
	       --use-gdb --text-offset $$offset ckpt_dmtcp1_test.dmtcp

ckpt_dmtcp1_test.dmtcp: $(targetdir)/test/dmtcp1
	$(targetdir)/bin/dmtcp_launch -i3 $(targetdir)/test/dmtcp1 &
	sleep 5 && $(targetdir)/bin/dmtcp_command --quit
	rm -f `ls -t dmtcp_restart_script*.sh`
	mv `ls -t ckpt_dmtcp1_*.dmtcp | head -1` ckpt_dmtcp1_test.dmtcp.gz
	gunzip ckpt_dmtcp1_test.dmtcp.gz

install: all
	${INSTALL_PROGRAM} $(targetdir)/bin/$(MTCP_RESTART) $(DESTDIR)$(bindir)

uninstall:
	rm -f $(DESTDIR)$(bindir)/$(MTCP_RESTART)

# The install-libs target is there to install plugin libraries when building
# multi-arch builds. This prevents the installation of 32-bit binaries.
# However, mtcp_restart is an exception -- we need to keep one copy for each
# arch.
install-libs: install

uninstall-libs: uninstall

tidy:
	rm -rf ckpt_*_files
	rm -f ckpt_*.dmtcp dmtcp_restart_script* core*

clean: tidy
	-rm -f *.o
	-rm -f $(targetdir)/bin/$(MTCP_RESTART)

distclean: clean
	rm -f Makefile

.PHONY: default all build tidy clean distclean install uninstall gdb build_mtcp_restart_debug gdb_run ckpt_dmtcp1_test.dmtcp 
