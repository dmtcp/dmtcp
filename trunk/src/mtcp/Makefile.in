CC = @CC@
M32=@M32@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@
ARM_HOST = @ARM_HOST@

# Allow the user to specify the install program.
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@

MKDIR_P = @MKDIR_P@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@
bindir = @bindir@
docdir = @docdir@
includedir = @includedir@
infodir = @infodir@
libdir = @libdir@
pkglibdir = $(libdir)/@PACKAGE@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
srcdir = @srcdir@
VPATH = @srcdir@
targetdir = $(top_builddir)

ifeq ($(M32),1)
  targetdir = $(top_builddir)/lib/$(PACKAGE)/32
  MTCP_RESTART=mtcp_restart-32
else
  MTCP_RESTART=mtcp_restart
endif

DMTCP_INCLUDE_PATH = $(top_srcdir)/include

INCLUDES = -I$(DMTCP_INCLUDE_PATH) -I$(top_builddir)/include \
	   -I$(srcdir) -I$(srcdir)/..
CFLAGS += -DHAVE_CONFIG_H -fPIC -g
CXXFLAGS += -DHAVE_CONFIG_H -fPIC -g
ifeq ($(M32),1)
CFLAGS += -m32 -Wa,--32
CXXFLAGS += -m32 -Wa,--32
LDFLAGS += -m32 -Wl,-m32 -Wl,-melf_i386 -Wa,--32
endif

COMPILE = $(CC) $(INCLUDES) $(CPPFLAGS) $(CFLAGS) -c -o $@
LINK = $(CC) $(CFLAGS) $(LDFLAGS) -o $@

ifeq (${ARM_HOST},yes)
  ARM_EXTRAS = $(srcdir)/libc-do-syscall-arm.S
  ARM_BINARIES = $(srcdir)/libc-do-syscall-arm.o
endif

HEADERS = mtcp_util.ic mtcp_sys.h mtcp_util.h ldt.h \
	  $(srcdir)/../membarrier.h $(DMTCP_INCLUDE_PATH)/procmapsarea.h

all: default
default: build
libs: build
build: $(targetdir)/bin/$(MTCP_RESTART) libmtcp.a

$(targetdir)/bin/$(MTCP_RESTART): mtcp_restart.o
	${LINK} -fPIC -g -O0 -nodefaultlibs ${ARM_EXTRAS} $^

# We need to compile mtcp_restart.c with "-fno-stack-protector" to avoid
# runtime stack smashing detection.
# We also need to build mtcp_restart without optimization (-O0), otherwise it
# may fail to restart. Since these three objects are fairly low level, we avoid
# any surprises by compiling them without any optimization.
# FIXME:  Wasn't this an issue only for DMTCP-2.1 or earlier?
#    The -fno-stack-protector concerned returning from the interrupt handler.
#    That now happens in a different function.
# IMPORTANT:  Compile with -O2 or higher.  On some 32-bit CPUs
#   (e.g. ARM/gcc-4.8), the inlining of -O2 avoids bugs when fnc's are copied.
mtcp_restart.o: mtcp_restart.c $(HEADERS) mtcp_check_vdso.c
	$(COMPILE) -DPIC -fPIC -fno-stack-protector -g -O0 $<

# procmapssrea.h taken from mtcp_util.h ; Is this necessary?
mtcp_check_vdso.o: mtcp_check_vdso.c mtcp_sys.h mtcp_util.h \
	$(DMTCP_INCLUDE_PATH)/procmapsarea.h
	$(COMPILE) -DPIC -fPIC -fno-stack-protector -g -O0 $<

libmtcp.a: tlsinfo.o ${ARM_BINARIES}
	ar cru $@ $^
# FIXME:  This is a low-level file.  Yet it draws from two directories.
#    Part of the problem is that tlsinfo.h copies DPRINTF from mtcp_util.h
#    and uses protectedfds.h, which is in ../../include
#    Do we really need protectedfds.h for low-level, where there is no JASSERT?
#    Similarly, we need -I.. for ldt.h.  Shouldn't that low-level file be here? 
#    Because of all the abstractions, there is no way to know about this bloat
#      and false dependencies, except by using 'make' as a black box
tlsinfo.o: tlsinfo.c $(HEADERS) $(DMTCP_INCLUDE_PATH)/protectedfds.h
	$(COMPILE) -DPIC -fPIC -fno-stack-protector -g -O0 $<
libc-do-syscall-arm.o: libc-do-syscall-arm.S
	${CC} -c $<

# Try 'make gdb' before 'make check' if you want debugging information
#   available in the case of 'make check' dumping core.
check: $(targetdir)/bin/$(MTCP_RESTART) ckpt_dmtcp1_test.dmtcp
	$(targetdir)/bin/$(MTCP_RESTART) --text-offset `./text_offset.sh \
	  $(targetdir)/bin/$(MTCP_RESTART)` ckpt_dmtcp1_test.dmtcp

gdb:
	make -f Makefile.mtcp gdb

install: all
	${INSTALL_PROGRAM} $(targetdir)/bin/$(MTCP_RESTART) $(DESTDIR)$(bindir)

uninstall:
	rm -f $(DESTDIR)$(bindir)/$(MTCP_RESTART)

# The install-libs target is there to install plugin libraries when building
# multi-arch builds. This prevents the installation of 32-bit binaries.
# However, mtcp_restart is an exception -- we need to keep one copy for each
# arch.
install-libs: install

uninstall-libs: uninstall

tidy:
	rm -rf ckpt_*_files
	rm -f ckpt_*.dmtcp dmtcp_restart_script* core*

clean: tidy
	-rm -f *.o *.a
	-rm -f $(targetdir)/bin/$(MTCP_RESTART)

distclean: clean
	rm -f Makefile

.PHONY: default all build tidy clean distclean install uninstall gdb
